package main

import (
	"chat-relay/internals/config"
	"fmt"
	"log"
	"strings"

	"github.com/slack-go/slack"
	"github.com/slack-go/slack/slackevents"
	"github.com/slack-go/slack/socketmode"
)

func main() {

	// load config

	conf, err := config.LoadConfig("./.config")
	if err != nil {
		log.Panic("error in loading the config")
	}

	log.Println("Config loaded")

	appToken := conf.BotConfig.SlackAppToken
	botToken := conf.BotConfig.SlackBotToken
	client := slack.New(botToken, slack.OptionDebug(true), slack.OptionAppLevelToken(appToken))
	socketClient := socketmode.New(
		client,
		socketmode.OptionDebug(true),
	)

	authTest, err := client.AuthTest()
	if err != nil {
		log.Fatalf("Error getting bot info: %v", err)
	}
	botUserID := authTest.UserID

	go func() {
		//idx := 0
		for evt := range socketClient.Events {
			switch evt.Type {
			case socketmode.EventTypeInteractive:
				log.Println("Interactive event received")
			case socketmode.EventTypeEventsAPI:
				event, ok := evt.Data.(slackevents.EventsAPIEvent)
				// log.Println("##############################################")
				// log.Println("Event is ", event)
				// log.Println("Inner Event is ", event.InnerEvent)
				// log.Println("Inner Event type is ", event.InnerEvent.Type)
				// log.Println("Inner Event data is ", event.InnerEvent.Data)
				// log.Println("Event Type is ", event.Type)
				// log.Println("idx is ", idx)
				// log.Println("##############################################")
				// idx++

				if !ok {
					continue
				}
				socketClient.Ack(*evt.Request)

				if event.Type == slackevents.CallbackEvent {
					switch ev := event.InnerEvent.Data.(type) {
					case *slackevents.AppMentionEvent:
						AppMentionEvent(client, ev) // bot mentioned message

					case *slackevents.MessageEvent:
						if ev.SubType == "" && ev.User != botUserID {
							MessageEvent(client, ev, botUserID) // direct message
							break
						}
					}
				}
			default:
				//log.Printf("Ignored event type: %s\n", evt.Type)
			}
		}
	}()

	log.Println("Slack bot is running in Socket Mode...")
	socketClient.Run()
}

func AppMentionEvent(client *slack.Client, event *slackevents.AppMentionEvent) {

	log.Println("*************************************************************************")
	log.Println("Received Message is ", event.Text)
	log.Println("Event Type is ", event.Type)
	log.Println("User is ", event.User)
	log.Println("Channel is ", event.Channel)
	log.Println("*************************************************************************")

	client.PostMessage(event.Channel, slack.MsgOptionText("Bot Message : Let's Play Holi ðŸ˜Ž", false))

}

func MessageEvent(client *slack.Client, event *slackevents.MessageEvent, botUserID string) {

	// <@U08R931LXAT>

	generatedID := fmt.Sprintf("<@%s>", botUserID)
	log.Println("GeneratedID is ", generatedID)
	if !strings.Contains(event.Text, generatedID) { // to check if the message is not generated by bot

		log.Println("*************************************************************************")
		log.Println("Received Message is ", event.Text)
		log.Println("Event Type is ", event.Type)
		log.Println("User is ", event.User)
		log.Println("Channel is ", event.Channel)
		log.Println("*************************************************************************")

		client.PostMessage(event.Channel, slack.MsgOptionText("Simple Message : Let's Celebrate Diwali ðŸ˜Ž", false))
	}
}
