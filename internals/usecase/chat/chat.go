package chat

import (
	"chat-relay/internals/adapter/externals/mock"
	"chat-relay/internals/config"
	"chat-relay/internals/core/chat"
	"fmt"
	"log"
	"strings"

	"github.com/slack-go/slack"
	"github.com/slack-go/slack/slackevents"
)

type ChatUseCaseImpl struct {
	conf    *config.Config
	mockSvc mock.MockClientService
}

func NewChatUseCase(conf *config.Config, mock mock.MockClientService) chat.ChatUseCase {
	return &ChatUseCaseImpl{
		conf:    conf,
		mockSvc: mock,
	}
}

func (c *ChatUseCaseImpl) MessageEvent(client *slack.Client, event *slackevents.MessageEvent, botUserID string) {

	// <@U08R931LXAT>

	generatedID := fmt.Sprintf("<@%s>", botUserID)
	log.Println("GeneratedID is ", generatedID)
	if !strings.Contains(event.Text, generatedID) { // to check if the message is not generated by bot

		log.Println("*************************************************************************")
		log.Println("Received Message is ", event.Text)
		log.Println("Event Type is ", event.Type)
		log.Println("User is ", event.User)
		log.Println("Channel is ", event.Channel)
		log.Println("*************************************************************************")

		client.PostMessage(event.Channel, slack.MsgOptionText("Simple Message : Let's Celebrate Diwali ðŸ˜Ž", false))
	}
}

func(c *ChatUseCaseImpl) AppMentionEvent(client *slack.Client, event *slackevents.AppMentionEvent) {

	log.Println("*************************************************************************")
	log.Println("Received Message is ", event.Text)
	log.Println("Event Type is ", event.Type)
	log.Println("User is ", event.User)
	log.Println("Channel is ", event.Channel)
	log.Println("*************************************************************************")

	client.PostMessage(event.Channel, slack.MsgOptionText("Bot Message : Let's Play Holi ðŸ˜Ž", false))

}