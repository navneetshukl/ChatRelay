package chat

import (
	"chat-relay/internals/adapter/externals/mock"
	"chat-relay/internals/config"
	"chat-relay/internals/core/chat"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/slack-go/slack"
	"github.com/slack-go/slack/slackevents"
)

type ChatUseCaseImpl struct {
	conf        *config.Config
	mockSvc     mock.MockClientService
	slackClient *slack.Client
}

func NewChatUseCase(conf *config.Config, mock mock.MockClientService, cl *slack.Client) chat.ChatUseCase {
	return &ChatUseCaseImpl{
		conf:        conf,
		mockSvc:     mock,
		slackClient: cl,
	}
}

func (c *ChatUseCaseImpl) MessageEvent(event *slackevents.MessageEvent, botUserID string) {

	// <@U08R931LXAT>

	generatedID := fmt.Sprintf("<@%s>", botUserID)
	log.Println("GeneratedID is ", generatedID)
	if !strings.Contains(event.Text, generatedID) { // to check if the message is not generated by bot

		log.Println("*************************************************************************")
		log.Println("Received Message is ", event.Text)
		log.Println("Event Type is ", event.Type)
		log.Println("User is ", event.User)
		log.Println("Channel is ", event.Channel)
		log.Println("*************************************************************************")

		req := chat.ChatRequest{
			UserID: event.User,
			Query:  event.Text,
			Event:  "message_event",
		}
		resp, err := c.mockSvc.MockServerResponse(req)
		if err != nil {
			log.Println("error in getting the response from the mock server ", err)
			return
		}

		if resp.StatusCode != http.StatusOK {
			log.Println("Error occured ", resp.ErrorMessage)
			return
		}

		msg := fmt.Sprintf("%s: %s", "message_event", resp.Response)

		c.slackClient.PostMessage(event.Channel, slack.MsgOptionText(msg, false))
	}
}

func (c *ChatUseCaseImpl) AppMentionEvent(event *slackevents.AppMentionEvent, botUserID string) {

	log.Println("*************************************************************************")
	log.Println("Received Message is ", event.Text)
	log.Println("Event Type is ", event.Type)
	log.Println("User is ", event.User)
	log.Println("Channel is ", event.Channel)
	log.Println("*************************************************************************")

	generatedID := fmt.Sprintf("<@%s>", botUserID)
	formattedQuery := strings.Replace(event.Text, generatedID, "", 1)

	req := chat.ChatRequest{
		UserID: event.User,
		Query:  formattedQuery,
		Event:  "app_mention_event",
	}
	resp, err := c.mockSvc.MockServerResponse(req)
	if err != nil {
		log.Println("error in getting the response from the mock server ", err)
		return
	}

	if resp.StatusCode != http.StatusOK {
		log.Println("Error occured ", resp.ErrorMessage)
		return
	}

	msg := fmt.Sprintf("%s: %s", "appmention_event", resp.Response)

	c.slackClient.PostMessage(event.Channel, slack.MsgOptionText(msg, false))
}
